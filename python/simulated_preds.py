# -*- coding: utf-8 -*-
"""
Test how effective NAPS is at assigning with simulated predicted shifts, 
generated by adding Gaussian noise to the real shifts

@author: Alex
"""

import numpy as np
import pandas as pd
from NAPS_importer import NAPS_importer
from NAPS_assigner import NAPS_assigner
from NAPS_analyse import import_testset_metadata, check_assignment_accuracy
from pathlib import Path

path = Path("..")

testset_df = import_testset_metadata(path)

id_all_carbons = [
        'A002', 'A003', 'A004', 'A005', 'A006', 'A008', 'A009', 'A010', 'A011',
        'A012', 'A013', 'A014', 'A015', 'A016', 'A017', 'A018', 'A019', 'A020',
        'A021', 'A023', 'A025', 'A026', 'A027', 'A028', 'A029', 'A033', 'A035',
        'A036', 'A037', 'A039', 'A043', 'A044', 'A045', 'A049', 'A050', 'A051',
        'A053', 'A059', 'A061', 'A062', 'A066', 'A067', 'A069']

#%% 
a = NAPS_assigner()

a.read_config_file(path/"config/config.txt")


# Import observed and (simulated) predicted shifts
importer = NAPS_importer()
importer.import_testset_shifts(path/"data/testset/simplified_BMRB/6338.txt")
    
a.obs = importer.obs

a.import_pred_shifts(path/"data/testset/shiftx2_results/A002_1XMTA.cs", "shiftx2")

sim_pred_sd = {"H":0.1711, "N":1.1169, "HA":0.1231, "C":0.5330, "CA":0.4412, "CB":0.5163}
#{"C":1,"CA":1,"CB":1,"H":10,"N":10,"HA":10}


sim_preds = a.simulate_pred_shifts(path/"data/testset/simplified_BMRB/6338.txt", 
                                   sim_pred_sd, seed=1)

#%% Try doing the assignment
a.add_dummy_rows()
a.calc_log_prob_matrix2(sf=1, verbose=False)
matching = a.find_best_assignments()
a.make_assign_df(matching, set_assign_df=True)
assign_df = a.check_assignment_consistency(threshold=0.1)

sum((assign_df["Res_name"]==assign_df["SS_name"]))

#%% Do this for all datasets

(path/"output/sim_predictions/0").mkdir(parents=True, exist_ok=True)

def test_simulated_preds(output_dir, id_list, sim_pred_sd, seed=None, atom_set=None):
    # Create output directory if it doesn't already exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    for id in id_list:
        print(id)
        # Import observed and (simulated) predicted shifts
        importer = NAPS_importer()
        importer.import_testset_shifts(testset_df.loc[id, "obs_file"])
        
        a = NAPS_assigner()
        a.read_config_file(path/"config/config.txt")   
        
        if atom_set is not None:
            a.pars["atom_set"] = atom_set
        
        a.obs = importer.obs
        a.simulate_pred_shifts(testset_df.loc[id, "obs_file"], 
                                           sim_pred_sd, seed=seed)
        
        a.add_dummy_rows()
        a.calc_log_prob_matrix2(sf=1, verbose=False)
        matching = a.find_best_assignments()
        a.make_assign_df(matching, set_assign_df=True)
        a.check_assignment_consistency(threshold=0.1)
        a.assign_df.to_csv(Path(output_dir)/(testset_df.loc[id, "out_name"]+".txt"), 
                           sep="\t", float_format="%.3f", index=False)
        
    assigns, summary = check_assignment_accuracy(output_dir, testset_df, id_list)
    return(assigns, summary)
    
sd0 = {"H":0, "N":0, "HA":0, "C":0, "CA":0, "CB":0}
assigns0, summary0 = test_simulated_preds(path/"output/sim_preds/no_error", id_all_carbons, sd0)
assigns0.to_csv(path/("output/sim_preds/assigns0.txt"), 
               sep="\t", float_format="%.3f",index=False)
summary0.to_csv(path/("output/sim_preds/summary0.txt"), 
               sep="\t", float_format="%.3f",index=False)


sd_shiftx2 = pd.Series({"H":0.454, "N":2.43, "HA":0.227, "C":1.030, "CA":0.932, "CB":1.025})
assigns_shiftx2, summary_shiftx2 = test_simulated_preds(path/"output/sim_preds/shiftx2", id_all_carbons, sd_shiftx2, seed=1)
assigns_shiftx2.to_csv(path/("output/sim_preds/assigns_shiftx2.txt"), 
               sep="\t", float_format="%.3f",index=False)
summary_shiftx2.to_csv(path/("output/sim_preds/summary_shiftx2.txt"), 
               sep="\t", float_format="%.3f",index=False)
# Define the central 95% chemical shift range for each atom type 
# (as measured in error_dist_test.py). CB set the same as CA
qr95 = pd.Series({"C":8.24025,"CA":21.08500,"CB":21.08500,
                  "H":2.73000,"HA":2.14075,"N":23.14675})

#%% Check with all atom types except HA
summary_dict = {}
assigns_dict = {}
for x in [0,0.025,0.05,0.075,0.1,0.125,0.15,0.2,0.25]:
    print("****", str(x), "****")
    assigns, summary = test_simulated_preds(path/("output/sim_preds/qr95_"+str(100*x)), 
                                            id_all_carbons, qr95*x, seed=int(x*100),
                                            atom_set = {"H","N","C","CA","CB",
                                                        "C_m1","CA_m1","CB_m1"})
    
    assigns_dict[x] = assigns
    summary_dict[x] = summary
    
    assigns.to_csv(path/("output/sim_preds/assigns_qr95_"+str(100*x)+".txt"), 
                   sep="\t", float_format="%.3f",index=False)
    summary.to_csv(path/("output/sim_preds/summary_qr95_"+str(100*x)+".txt"), 
                   sep="\t", float_format="%.3f",index=False)
    
keys = list(summary_dict.keys())
tmp = pd.DataFrame({"Error":keys, "Pc_correct":[summary_dict[k].loc[0, "Pc_correct"] for k in keys]})

#### Make a poster figure
from plotnine import *
plt = ggplot(data=tmp) + geom_point(aes(x="100*Error", y="100*Pc_correct"))
plt = plt + ylab("Accuracy (%)") + xlab("Error (% of 95% interval)")
plt = plt + scale_y_continuous(breaks=np.arange(0,101,10), limits=(0,100)) 
plt += theme_bw()
plt.save(path/"plots/Poster sim preds accuracy.pdf", height=100, width=100, units="mm")
#plt = ggplot(data=assigns_shiftx2) 
#plt = plt + geom_bar(aes(x="ID", fill="Status"), 
#                     position=position_fill(reverse=True))
#plt = plt + geom_text(aes(x="summary.index", label="Pc_correct"), y=0.1, 
#                      format_string="{:.0%}", data=summary_shiftx2, angle=90)
#plt = plt + theme(axis_text_x=element_text(rotation=90, hjust=0.5))
#plt

#%% Repeat, but restricting to HN only
HN_summary_dict = {}
HN_assigns_dict = {}
for x in [0.2, 0.25]:#[0, 0.005, 0.01, 0.015, 0.02, 0.025,0.05,0.075,0.1,0.15]:
    print("****", str(x), "****")
    assigns, summary = test_simulated_preds(path/("output/sim_preds/qr95_"+str(100*x)), 
                                            id_all_carbons, qr95*x, seed=int(x*100),
                                            atom_set = {"H","N"})
    
    HN_assigns_dict[x] = assigns
    HN_summary_dict[x] = summary
    
    assigns.to_csv(path/("output/sim_preds/HN_assigns_qr95_"+str(100*x)+".txt"), 
                   sep="\t", float_format="%.3f",index=False)
    summary.to_csv(path/("output/sim_preds/HN_summary_qr95_"+str(100*x)+".txt"), 
                   sep="\t", float_format="%.3f",index=False)
    
keys = list(HN_summary_dict.keys())
tmp = pd.DataFrame({"Error":keys, "Pc_correct":[HN_summary_dict[k].loc[0, "Pc_correct"] for k in keys]})

plt = ggplot(data=tmp) + geom_point(aes(x="100*Error", y="100*Pc_correct"))
plt = plt + ylab("Accuracy (%)") + xlab("Error (% of 95% interval)")
plt += scale_y_continuous(breaks=np.arange(0,101,10), limits=(0,100)) 
#plt += scale_x_continuous(breaks=np.arange(0,16,2))
plt += theme_bw()
plt.save(path/"plots/Poster sim preds accuracy HN.pdf", height=100, width=100, units="mm")
